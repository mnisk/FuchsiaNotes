Overview
- runs an LK-based kernel augmented with kernel objects and userland support
  - channels and sockets used for transmitting data
  - events / signals used for signalling async events
  - threading used for concurrency
- device drivers, networking and filesystems exist as userland processes 
  although some device support is directly in the kernel, such as pci primitives
  - not a pure microkernel design, more pragmatic than ideological
  - devmgr handles userland startup and runs devices
  - devhost instances for each device driver
  - netstack runs networking
  - application_manager receives messages for launching apps based on URIs
  - devices/services support one of several device class protocols
    which provide a set of methods to interact with the driver
- a ddk isolates details of driver implementation
- devices appear in a /dev filesystem
- looks like there is support for dart and golang for apps and components
  (and possibly rust soon?)
- in extreme flux, and higher level components are not all runable today
  - some graphics tests work, but the sysui isnt runnable
  - i cant get any dart stuff running
  - net stack works but i'm told is likely to be replaced with golang impl 

----

magenta - kernel + base services
fuchsia - OS services (the OS) ?
magma - graphics engine (half in app, half in userland driver)
dart - nextgen JS-like language with some types and generics and concurrency
flutter - framework for making portable mobile apps (in dart?)
mojo - IPC toolkit for component development

launches apps by URL by writing to /dev/class/misc/dmctl
  - mojo apps launched with "file:///path/" (was "mojo:appname")
  - debug with "kerneldebug msg" (prefix with "`" in mxshell)

console has cmd processor

exec (from mxshell src)
  launchpad_create
  launchpad_arguments
  launchpad_environ
  launchpad_add_vdso_vmo
  launchpad_clone_mxio_root
  launchpad_vmo_from_fd
  launchpad_load_vdso
  launchpad_clone_mxio_cwd
  launchpad_clone_fd
  launchpad_start
  mx_handle_wait_one
  mx_object_get_info
  mx_handle_close
  launchpad_destroy


devhost
  - processes dmctl channel
  - starts up builtin drivers
  - starts up /boot/lib/driver/* 
    (dlopen's into same space and gets __magenta_driver__)

- startup
  - magenta kernel builds process with userboot image, opens several handles
    and sends a bootstrap message to the process
  - userboot starts in system/core/userboot/start.c _start()
    this is the first process
  - userboot runs devmgr from ELF file on bootfs
  - devmgr manages filesystem tree
    including bootfs, system, dev, mem, rpc
  - devmgr launches services and drivers
    - crashlogger
    - mxsh:autorun
    - application-manager
    - watches block drivers, and launches gpt, minfs or fat
    - mxsh:console and mxsh:vc
    - acpisvc
  - each driver is run in a devhost instance
    cmd line args selects which driver
    loads .so from /boot/lib/driver/*.so (or /system/lib/driver)
    - acpi
    - root - contains busses and singletons 
      devmgr_init_pcie()
    - busses run more instances of devhost as needed
  - devmgr runs shell on serial console
  - devmgr runs /system/bin/init (bin/init/init.c), this kicks off fuchsia
    - creates a new job, renaming itself to "fuchsia"
    - runs /system/bin/application_manager (application/src/manager/main.cc)
    - repeats if it ever stops
  - devmgr runs "/boot/bin/sh /boot/autorun"

- mxrio stuff does remote IO calls over a channel
  ./system/ulib/mxio/remoteio.c
- devhost / devmgr look like they pass back messages? XXX

XXX look at mxio layer
XXX look at devhost_msg_t and its IPC processing
XXX DDK - protocols, syscalls

launchpad lib has utils for executing new processes (exec is not a syscall)

- MINOR BUG: _driver_acpi_root device has a NULL .name field.

- drivers are run in userland and are managed by devhost and devmgr
  - they use ddk lib to access hardware features like pci
    which get translated to system calls
  - threads are used to dispatch interrupts with system calls for
    waiting for an interrupt, and completing an interrupt
  - devices set signals on their handle to communicate when IO is ready
  - devices provide ops through one of the DDK class protocols
    for accessing device features, such as "recv"
  - services/devices bind to fs paths with ioctl_devmgr_mount_fs
    (XXX devmgr_connect?)
  - mxio library supports ops to remote servers (mx_remote_ops)
    in ulib/mxio/remoteio.c. Uses message passing to servers.
  - XXX bound into fs tree?
  - XXX IPC to talk to driver?

- example driver: eth
  - uses pci to access hardware, which in turn calls down to syscalls
  - irq_thread handles irq processing.  irq just sets DEV_STATE_READABLE
    when appropriate
  - eth_recv can read a frame if in READABLE state, clearing the state
    when appropriate.  up to caller to wait on READABLE

- application_manager - apps/modular/src/application_manager
  - XXX this looks in flux as of 20161110. more url handlers later?
    more config file or features?
  - parses a startup config that has initial apps to run
    and runs each of these first
  - reads commands on handle, splits on whiespace and executes application
    based on url handler.  right now just file://
  - devmgr_launch_devhost() sends messages to app manager to execute
  - devhost_launch_devhost() calls devmgr_launch_devhost()
  - dmctl passes file: URLs to app_launcher channel to application_manager

- netsvc
  - looks like its for supporting netboot during development
  - has a shell and logging on udp6
  - also spawns netstack for the real network stack
    (note: its gives netstack a procname of net:mxsh, this appears to be a bug)
  see ./magenta/system/public/magenta/netboot.h and netsvc.c
  several tools in magenta/system/tools/
  built to ./out/build-magenta/tools/net*

- netstack
  - started by netsvc (or manually)
  - binds to /dev/socket
    /dev/socket/none - for getaddrinfo and other unconnected apis
    /dev/socket/socket/domain/type/protocol - an uninitialized socket
      - subdir "accept" opened to accept
  - magenta/system/ulib/mxio/bsdsocket.c provides BSD socket API

- helpful commands from mxsh
  k thread list
  k mx ps
  dm reboot

- too early stuff
  - apps/component_manager
    - looks like mojo components will be loaded by URL over network
  - apps/maxwell - ambient and task-related context for apps
    - has a GPS "acquirer"
  - ledger - distributed storage
  - mozart - apps and services for GUI
  - modular - experimental app platform - with "call by meaning"
    file:///system/apps/launcher file:///system/apps/device_runner
    "Modular provides a framework for ephemerally downloaded applications which may have been implemented in 
     different programming languages to run in a shared context and provide a composed experience to the user. The 
     framework is also responsible for application lifecycle, resource management, view hierarchy, authentication, 
     etc."
  - motown / media - playback and media service

- bootstrap and launcher 
  - bootstrap and launcher are tools for running some apps in an appropriate
    environment.  grep through *.md files for examples.
  @ bootstrap launch basic_wm
  @ bootstrap launch spinning_square
  @ bootstrap launch hello_material
  @ bootstrap device_runner --user-shell=dev_user_shell --user-shell-args=--root-module=example_flutter_hello_world
  @ bootstrap launch video_player --path=/data/vid.ogv
  - after launching basic_wm you can use /system/apps/launch to launch
    other apps in windows instead of full screen.


